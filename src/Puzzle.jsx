import React, { useState } from 'react';
import './Puzzle.css';

const Puzzle = () => {
    const [보드, 보드설정] = useState(보드생성());

    function 보드생성() {
        const 숫자들 = [...Array(15).keys(), null];
        return shuffleArray(숫자들);
    }

    function shuffleArray(array) {
        return array.sort(() => Math.random() - 0.5);
        //아무거나 랜덤으로 클릭하기
    }

    const handleTileClick = (인덱스) => {
        const 빈칸인덱스 = 보드.indexOf(null);
        const isAdjacent = (인덱스 === 빈칸인덱스 - 1 || 인덱스 === 빈칸인덱스 + 1 || 인덱스 === 빈칸인덱스 - 4 || 인덱스 === 빈칸인덱스 + 4);
        //2칸이상의 경우
        const isAdjacent2 = (인덱스 === 빈칸인덱스 - 2 || 인덱스 === 빈칸인덱스 + 2 || 인덱스 === 빈칸인덱스 - 8 || 인덱스 === 빈칸인덱스 + 8);
        //3칸이상의 경우
        const isAdjacent3 = (인덱스 === 빈칸인덱스 - 3 || 인덱스 === 빈칸인덱스 + 3 || 인덱스 === 빈칸인덱스 - 12 || 인덱스 === 빈칸인덱스 + 12);
        

        if (isAdjacent) {
            const 새로운보드 = [...보드];
            [새로운보드[인덱스], 새로운보드[빈칸인덱스]] = [새로운보드[빈칸인덱스], 새로운보드[인덱스]];
            보드설정(새로운보드);
        }
        if (isAdjacent2) {
            const 새로운보드 = [...보드];
            if (인덱스 === 빈칸인덱스 - 2){
                [새로운보드[인덱스],새로운보드[인덱스+1] ,새로운보드[빈칸인덱스]] = [새로운보드[빈칸인덱스],새로운보드[인덱스] ,새로운보드[인덱스+1]];
                보드설정(새로운보드);
            }
            if (인덱스 === 빈칸인덱스 + 2){
                [새로운보드[인덱스],새로운보드[인덱스-1] ,새로운보드[빈칸인덱스]] = [새로운보드[빈칸인덱스],새로운보드[인덱스] ,새로운보드[인덱스-1]];
                보드설정(새로운보드);
            }
            if (인덱스 === 빈칸인덱스 -8){
                [새로운보드[인덱스],새로운보드[인덱스+4] ,새로운보드[빈칸인덱스]] = [새로운보드[빈칸인덱스],새로운보드[인덱스] ,새로운보드[인덱스+4]];
                보드설정(새로운보드);
            }
            if (인덱스 === 빈칸인덱스 + 8){
                [새로운보드[인덱스],새로운보드[인덱스-4] ,새로운보드[빈칸인덱스]] = [새로운보드[빈칸인덱스],새로운보드[인덱스] ,새로운보드[인덱스-4]];
                보드설정(새로운보드);
            }
        }
        if (isAdjacent3) {
            const 새로운보드 = [...보드];
            if (인덱스 === 빈칸인덱스 - 3){
                [새로운보드[인덱스],새로운보드[인덱스+1], 새로운보드[인덱스+2] ,새로운보드[빈칸인덱스]] = [새로운보드[빈칸인덱스],새로운보드[인덱스] ,새로운보드[인덱스+1], 새로운보드[인덱스+2]];
                보드설정(새로운보드);
            }
            if (인덱스 === 빈칸인덱스 + 3){
                [새로운보드[인덱스],새로운보드[인덱스-1],새로운보드[인덱스-2] ,새로운보드[빈칸인덱스]] = [새로운보드[빈칸인덱스],새로운보드[인덱스] ,새로운보드[인덱스-1], 새로운보드[인덱스-2]];
                보드설정(새로운보드);
            }
            if (인덱스 === 빈칸인덱스 -12){
                [새로운보드[인덱스],새로운보드[인덱스+4],새로운보드[인덱스+8] ,새로운보드[빈칸인덱스]] = [새로운보드[빈칸인덱스],새로운보드[인덱스] ,새로운보드[인덱스+4], 새로운보드[인덱스+8]];
                보드설정(새로운보드);
            }
            if (인덱스 === 빈칸인덱스 + 12){
                [새로운보드[인덱스],새로운보드[인덱스-4],새로운보드[인덱스-8] ,새로운보드[빈칸인덱스]] = [새로운보드[빈칸인덱스],새로운보드[인덱스] ,새로운보드[인덱스-4], 새로운보드[인덱스-8]];
                보드설정(새로운보드);
            }
        }







    };
    

    return (
        <div className='퍼즐'>
            <div className="퍼즐-컨테이너">
                {보드.map((값, 인덱스) => {
                    return (
                        <div key={인덱스} className={`퍼즐-조각 ${값 === null ? '빈칸' : ''}`}
                        onClick={() => handleTileClick(인덱스)}>{값+1}</div>
                    );
                })}
            </div>
        </div>
    );
};

export default Puzzle;
